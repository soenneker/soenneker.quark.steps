@using Soenneker.Quark.Enums.Colors
@using Soenneker.Quark.Divs
@inherits Soenneker.Quark.Components.Element

<Div Class="step" @attributes="BuildAttributes()">
    @if (Numbered)
    {
        <Div Class="step-number">@StepNumber</Div>
    }
    <Div Class="step-content">
        @if (!string.IsNullOrEmpty(Title))
        {
            <Div Class="step-title">@Title</Div>
        }
        @if (!string.IsNullOrEmpty(Description))
        {
            <Div Class="step-description">@Description</Div>
        }
        @ChildContent
    </Div>
</Div>

@code {
    [Parameter]
    public int StepNumber { get; set; }

    [Parameter]
    public new string? Title { get; set; }

    [Parameter]
    public string? Description { get; set; }

    [Parameter]
    public bool Active { get; set; }

    [Parameter]
    public bool Completed { get; set; }

    [Parameter]
    public bool Disabled { get; set; }

    [Parameter]
    public Color Color { get; set; } = Color.Primary;

    [Parameter]
    public bool Numbered { get; set; } = true;

    protected override Dictionary<string, object> BuildAttributes()
    {
        Dictionary<string, object> attributes = base.BuildAttributes();

        var baseClasses = "step";
        if (Active)
            baseClasses = $"{baseClasses} step-active";
        if (Completed)
            baseClasses = $"{baseClasses} step-completed";
        if (Disabled)
            baseClasses = $"{baseClasses} step-disabled";

        attributes["class"] = AppendToClass(attributes.GetValueOrDefault("class")
            ?.ToString(), baseClasses);

        return attributes;
    }
}
